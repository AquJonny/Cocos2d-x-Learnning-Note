
  Sprite 是一个2D图像节点
  可以使用一个图片或者图片的一个矩形区域来创建 Sprite对象。

  添加精灵的方法:
    从最根本说起的话,Sprite::create()可谓是一切的一切的源头.
    从这个方法基础上衍生出来的各种创建方法,再扩展,就形成了现在这么多种类的创建方法.
    
    虽说"这么多种类",不过,用到的方法,最多也就那么几种.
    1. Sprite::create()
    ->创建一个空的精灵对象,内容属性都需要之后添加

    2. Sprite::create(const std::string& filename)
    ->创建一个精灵对象,使用的是指定文件的图片

    3. Sprite::create(const std::string& filename, const Rect& rect)
    ->创建一个精灵对象,使用的是指定文件的特定区域的图片

    4. Sprite::createWithtexture(tecture2D* texture)
    ->创建一个精灵对象,使用的是指定的纹理(通常配合SpriteBatchNode使用)

    5. Sprite::createWithSpriteFrame(SpriteFrame* spriteframe)
    ->创建一个精灵对象,使用的是指定的精灵帧(通常配合SpriteFrame使用)

    6. Sprite::createWithSpriteFrameName(const std::string& spriteframename)
    ->创建一个精灵对象,通过SpriteFrame名,应用指定的精灵帧(通常配合SpriteFrameCache使用)
    
    以上都是很常用的精灵创建方法.

    基于MVC(或者类MVC)结构的思想,精灵常常会被单独作为一个类来定义.
    此时精灵类的init方法中会使用到Sprite::initXXXX()相关的方法,所以作为变相的create,也简单的提一下.
    *需要注意的是,并没有一个叫做Sprite::init()的方法,这与create不太一样
    
    1. Sprite::initWithFile(const std::string& filename)

    2. Sprite::initWithFile(const std::string& filename, const Rect& rect)

    3. Sprite::initWithTexture(tecture2D* texture)

    4. Sprite::initWithSpriteFrame(priteFrame* spriteframe)

    6. Sprite::initWithSpriteFrameName(const std::string& spriteframename)

    可以看出,除了创建一个空对象之外,所有create方法都有其对应的init方法.

  在创建方法中提到了几个关键字SpriteFrame,SpriteBatchNode,SpriteFrameCache.
  基于个人理解来说的话:
    1. SpriteFrame是单纯将精灵帧保存起来的一个容器(栈),通过pushback，将一个个精灵帧放入容器内.
    
    2. SpriteFrameCache是SpriteFrame的进化型,通过(n.plist, n.png)的方式载入一个SpriteSheet文件
       而,其中每个SpriteFrame的信息都在n.plist中保存着.可以通过Name这样的关键字找到特定精灵帧.
    
    3. SpriteBatchNode更像是SpriteFrameCache和Sprite的结合体.它可以和SpriteFrameCache一样方式的
       添加纹理集信息,也可以像Sprite一样设置坐标,设置各种属性,在画面上显示.而利用它提供的纹理创建的
       精灵,作为SpriteBatchNode中的一个子节点(addChild).*SpriteBatchNode更像是一个layer,承载着诸多Sprite,

  
















