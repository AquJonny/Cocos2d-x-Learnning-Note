  说起精灵的动画,需要先看一下下面着张图.
  http://www.cocos.com/doc/doc/cocos-docs-master/manual/framework/native/v3/action/res/inherent.png

  一切动作都是基于Action类的,
  Action类拥有三个子类,
    FiniteTimeAction :所有有限时间动作的基类。 可能的动作

    Follow           :一个追踪某个节点的动作。 与其使用相机去追踪一个动作，你可以使用这个动作达到同样的效果。 

    Speed            :改变一个动作的速度，使它的执行使用更长的时间（speed>1）或更少（speed<1） 
                      可以有效得模拟“慢动作”或“快进”的效果。

  而从FiniteTimeAction中又分出了两大分支
    ActionInstant :即时动作是会立即被执行的动作。
                   他们没有持续时间动作（ActionInterval）的持续时间属性。

    ActionInterval:延时就是指动作的完成需要一定的时间。 
                   它有一个开始时间和完成时间。完成时间等于起始时间加上持续时间
                   因此，actionWithDuration是延时动作执行时的第一个参数

  动作要想玩的溜,就全靠对这些Action类的运用了.

  如果仔细看的话,Animate也继承自Action类.
  因此,不论"动作"或是"动画"归根结底都是Action.
  先编辑好想要实现的动作/动画,在调用runAction(),执行动作.
  这是他们的相同点.
  
  说到不同点的话,就是这"编辑"的过程了.

  动作(FiniteTimeAction视角)
    1.单个动作
      MoveTo,ScaleTo,RotateTo,JumpTo...
      MoveBy,ScaleBy,RotateBy,JumpBy...
      这些都是一个完整的有方向性的动作,需要注意的是xxxxTo和xxxxBy的差别.
      xxxxTo:意味着运动到指定的x,y的值的位置
      xxxxBy:意味着运动到按照指定的x，y增量的位置
             (这里x，y的值是值变化多少，而不指定运动到这个位置；x，y可以是负值)

      除了有方向性的动作之外,还有一些非方向性的.
      Blink,FadeIn,FadeOut...

    2.组合动作
      把复数单个动作组合起来的一些方法
      DelayTime     :延时动作其实什么都不做，提供一段空白期
      Repeat        :反复执行某个动作
      RepeatForever :反复执行某个动作,直至永远(被删除为止)
      Spawn         :使一批动作同时执行
      Sequence      :让各种动作有序执行

    *单个动作之间可以通过组合动作来连接
    *DelayTime严格上来说也算是一个单个动作,只是这个动作是什么都不做
    *组合动作之间可以相互组合,以达成更复杂的行为(例:Sequence(Repeate(),Spawn(),Sequence()...))
    
    3.一些特殊的动作
      CallFunc       :调用函数
      RemoveSelf     :删除本对象(执行动作的对象,而不是动作)
      TargetedAction :可以让内部动作强制在目标节点上执行，而不是调用runAction函数时指定的节点

    4.动作的速度
      基本动作和组合动作实现了针对精灵的各种运动、动画效果的改变，
      但这样的改变的速度时不变的，通过（ActionEase）为基类的类系和Spped类我们可以很方便的修改精灵执行动作的速度：
        EaseIn -由慢至快
        EaseOut - 由快至慢
        EaseInOut - 由慢至快再由快至慢
        EaseSineIn - 由慢至快
        EaseSineOut - 由快至慢
        EaseSineInOut - 由慢至快再由快至慢
        Speed - 人工设定速度，还可通过SetSpeed不断调整

参考:
https://my.oschina.net/ffs/blog/317118
http://bingkuailong.blog.163.com/blog/static/128421908201241925348168/

  动作也就这些玩意儿了,不过就像是魔方一样,不过是26个方块,但是变化却是千变万化.


  动画
    相比动作,它的"编辑"过程相对简单许多.
    究其原因,因为"动作"都在一帧一帧的画面里表现出来了.

    和动画相关的一些类:
    AnimationCache  :用于存放多张动画帧的缓存
    AnimationFrame  :动画帧
    Animation       :将动画帧进行打包
    Animate         :播放打包好的动画

    根据这些类,大概就可以看出动画的编辑过程了
    1.将需要的复数动画帧都缓存到AnimationCache中(可省略)
      (也可以是AnimationFrame类型的容器里)
      (使用SpriteFrame/SpriteFrameCache也可以)(用这个的人比较多)
    
    2.使用Animation方法,将AnimationFrame/SpriteFrame(从Cache中取出)打包

    3.使用Animate方法,把打包好的Animation进行播放,生成Action对象
      (这样才能当作一个Action被使用和执行)

参考:
http://www.cnblogs.com/ttss/p/4093687.html


